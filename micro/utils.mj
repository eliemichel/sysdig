(**********************************************************)
(* empty<n>() = [0..0] avec n 0 *)
empty<n>() = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = 0.empty<n-1>()
  end if
end where

(**********************************************************)
(* mux_n(a, b, c) = a si c = 1, b sinon *)
mux_n<n>(a:[n], b:[n], c) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = mux(a[0], b[0], c).mux_n<n-1>(a[1..], b[1..], c)
  end if
end where

(**********************************************************)
(* big_mux(d:n, c) = bit de d (data) d'adresse c (ctrl)   *)
(* Le problème c'est qu'on ne peut pas vraiment dire
   qu'une nappe est de taille 2^n ou log2 n... *)
(* Du coup on est un peu obligés d'écrire tous les
   big_mux à la main.
   J'ai créé l'utilitaire big_mux_creator.ml. Vu ce qu'il
   fait, pas besoin de le compiler :
   ocaml big_mux_creator.ml 16 affichera les big_mux de
   2 jusqu'à 16 par exemple : *)
big_mux_2(d:[2],c:[1]) = o where
  o = mux(d[1],d[0],c[0])
end where
big_mux_4(d:[4],c:[2]) = o where
  o = mux(
    big_mux_2(d[2..3],c[0]),
    big_mux_2(d[0..1],c[0]),
    c[1])
end where
big_mux_8(d:[8],c:[3]) = o where
  o = mux(
    big_mux_4(d[4..7],c[0..1]),
    big_mux_4(d[0..3],c[0..1]),
    c[2])
end where
big_mux_16(d:[16],c:[4]) = o where
  o = mux(
    big_mux_16(d[8..15],c[0..2]),
    big_mux_16(d[0..7],c[0..2]),
    c[3])
end where

(**********************************************************)
(* reg_n(a) = reg a *)
reg_n<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    o = (reg a[0]).reg_n<n-1>(a[1..])
  end if
end where

(**********************************************************)
(* incr_n(a) = a+1 *)
incr_n<n>(a:[n]) = (o:[n]) where
  if n = 0 then
    o = []
  else
    b = incr_n<n-1>(a[..n-2]);
    o = mux_n<n>(b . 0, a[..n-2] . 1, a[n-1])
  end if
end where

(**********************************************************)

(* fulladder *)
fulladder(a,b,c) = (s, r) where
  s = (a xor b) xor c;
  r = (a and b) or ((a xor b) and c);
end where

(* add_r_n(a, b, r) = a + b + r mod n *)
add_r_n<n>(a:[n], b:[n], r_in) = (c:[n]) where
  if n = 0 then
    c = []
  else
    (s, r) = fulladder(a[n-1], b[n-1], r_in);
    c = add_r_n<n-1>(a[..n-2], b[..n-2], r) . s
  end if
end where

(* add_n(a, b) = a + b mod n *)
add_n<n>(a:[n], b:[n]) = (c:[n]) where
  c = add_r_n<n>(a, b, 0)
end where

