
(* #require(param utils sys alu mem jump) *)

(*
	writeAddr : Détermine les write enables
	 - 0** -> (**) register
	 - 100 -> (a0 a1)
	 - 110 -> (r0 r1)
	 - 111 -> writeDisable
	
	**r : valeur lue
	**e : write enable
	**w : valeur à écrire
*)
registers (a0w:[wordSize], a1w:[wordSize], r0w:[wordSize], r1w:[wordSize], writeAddr:[3]) =
		(a0r:[wordSize], a1r:[wordSize], r0r:[wordSize], r1r:[wordSize]) where
	wa0 = writeAddr[0];
	wa1 = writeAddr[1];
	wa2 = writeAddr[2];
	a0e = not(wa1 or wa2);
	a1e = not(wa1) and (wa0 xor wa2);
	r0e = wa1 and not(wa2);
	r1e = wa1 and (wa0 xor wa2);
	
	a0r = enableReg<wordSize>(a0w, a0e);
	a1r = enableReg<wordSize>(a1w, a1e);
	r0r = enableReg<wordSize>(r0w, r0e);
	r1r' = enableReg<wordSize>(r1w, r1e);
	r1r = 1.1.1.1.0.0.0.0;
end where


main (input) = (power, output:[outputSize]) where
	instr = rom<instrAddrSize, instrSize>(instrAddr);
	unit0 = instr[0];
	unit1 = instr[1];
	op = instr[2..];
	
	(a0r, a1r, r0r, r1r) = registers(a0, a1, r0, r1, regAddr);
	
	isSYS = not(unit0) and not(unit1);
	(regAddrSys, output) = sys(a0r, op, input, isSYS);
	
	isALU = not(unit0) and unit1;
	(aluR0, aluR1, regAddrAlu) = alu(a0r, a1r, op);
	
	isMEM = unit0 and not(unit1);
	(memWrite, regAddrMem) = mem(a0r, a1r, r0r, r1r, op, isMEM);
	
	
	isJUMP = unit0 and unit1;
	(instrAddr, regAddrJump) = jump(a0r, a1r, r0r, r1r, op, isJUMP);
	
	
	power = not(full_n<instrSize>(instr));
	
	regAddr = mux4_n<3>(regAddrSys, regAddrAlu, regAddrMem, regAddrJump, unit0, unit1);
	
	vide = empty<wordSize>();
	input8 = input . vide[1..];
	a0 = mux4_n<wordSize>(input8, aluR0, memWrite, instrAddr[..wordSize-1], unit0, unit1);
	a1 = mux4_n<wordSize>(input8, vide , memWrite, instrAddr[wordSize..]  , unit0, unit1);
	r0 = mux4_n<wordSize>(input8, aluR0, memWrite, instrAddr[..wordSize-1], unit0, unit1);
	r1 = mux4_n<wordSize>(input8, aluR1, memWrite, instrAddr[wordSize..]  , unit0, unit1);
end where




