
(* #require(param utils) *)

mem (a0r:[wordSize], a1r:[wordSize], r0r:[wordSize], r1r:[wordSize], op:[instrSize-2]) =
		(toBeWritten:[wordSize], regAddrMem:[3]) where
	op0 = op[0];
	op1 = op[1];
	isMOVEright = not(op0) and not(op1);
	isMOVEleft  = not(op0) and     op1;
	isLOAD      =     op0  and not(op1);
	isSAVE      =     op0  and     op1;
	
	op2 = op[2];
	op3 = op[3];
	fromRegA = mux_n<wordSize>(a1r, a0r, op3); (* MOVEleft ou isLOAD ou isMOVE *)
	fromRegR = mux_n<wordSize>(r1r, r0r, op3); (* MOVEright                    *)
	fromReg  = mux_n<wordSize>(fromRegR, fromRegA, isMOVEright);
	
	ramAddr = mux_n<wordSize>(r1r, r0r, op2);
	fromRam = ram<wordSize, wordSize>(ramAddr, isSAVE, ramAddr, fromReg);
	
	toBeWritten = mux_n<wordSize>(fromRam, fromReg, op0);
	regAddrMem = 0 . (isMOVEleft and not op0) . op3;
end where
