const instrAddrSize = 16
const wordSize = 8

(* #require(param utils) *)

makeJump (isJumping, isAbs, jumpSize:[wordSize], absAddr:[instrAddrSize], addOrSub) =
		(addr:[instrAddrSize]) where
	curAddr = reg_n<instrAddrSize>(addr);
	a = incr_n<instrAddrSize>(curAddr);
	vide = empty<instrAddrSize-wordSize>();
	b = add_n<instrAddrSize>(
		curAddr,
		vide . jumpSize
	);
	c = sub_n<instrAddrSize>(
		curAddr,
		vide . jumpSize
	);
	d = mux_n<instrAddrSize>(b, c, (addOrSub)
	e = mux_n<instrAddrSize>(d, a, isJumping)
	addr = mux_n<instrAddrSize>(absAddr, e, isAbs)
end where

jump (a0r:[wordSize], a1r:[wordSize], r0r:[wordSize], r1r:[wordSize], op:[instrSize-2]) =
		(instrAddr:[instrAddrSize], regAddrJump:[3]) where
	op0 = op[0];
	op1 = op[1];
	op2 = op[2];
	op3 = op[3];
	
	rr = mux4_n<wordSize>(a0r, a1r, r0r, r1r, op2, op3);
	deux = 01 . empty<instrAddrSize-2>;
	jumpSize = mux_n<wordSize>(deux, crAddr, op0);
	
	isJumping = isJUMP and not(op0 and op1);
	isAbs = op0 and op1 and not(op2);
	
	instrAddr = makeJump(isJumping, isAbs, jumpSize, absAddr, addOrSub);
	regAddrJump = mux_n<3>(100, 111, op0 and op1 and op2 and not(op3))
end where



